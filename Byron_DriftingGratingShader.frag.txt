/* Byron_DriftingGratingShader.frag.txt */

const float twopi = 2.0*3.141592653589793;

/* Values passed from vertex shader: */
varying float Count;
varying float Cycles_Pixel;
varying float Orientation;
varying float Speed;
varying float Radius;
varying float wcenter;
varying float hcenter;
varying vec4  firstColor;
varying vec4  secondColor;

void main()
{
    /* Query current output texel position: */
    vec2 pos = gl_TexCoord[0].xy;

    /* Convert distance, apply shift offset: */
    float x = pos[0]-wcenter;
    float y = pos[1]-hcenter;
    float sigmasquare = 2.0*4.0*Radius*Radius; /* (2*sigma)^2 goes into Gaussian kernel, recall 68-95 rule */
    float orient_vec = sin(Orientation)*x+cos(Orientation)*y;
    float kernel = exp(-(x*x/sigmasquare+y*y/sigmasquare));
    float mix_coeff = (0.5+0.5*sin(twopi*Cycles_Pixel*orient_vec+twopi*Speed*Count))*kernel;

    /* Mix the two colors stored in gl_Color and secondColor, using the slow
     * sine-wave weight term in d as a mix weight between 0.0 and 1.0:
     */
    gl_FragColor = mix(firstColor, secondColor, mix_coeff);
}
